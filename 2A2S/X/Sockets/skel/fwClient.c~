/***************************************************************************
 *            fwClient.h
 *
 *  Copyright  2016  mc
 *  <mcarmen@<host>>
 ****************************************************************************/
#include "fwClient.h"


/**
 * Function that sets the field addr->sin_addr.s_addr from a host name 
 * address.
 * @param addr struct where to set the address.
 * @param host the host name to be converted
 * @return -1 if there has been a problem during the conversion process.
 */
int setaddrbyname(struct sockaddr_in *addr, char *host)
{
  struct addrinfo hints, *res;
	int status;

  memset(&hints, 0, sizeof(struct addrinfo));
  hints.ai_family = AF_INET;
  hints.ai_socktype = SOCK_STREAM; 
 
  if ((status = getaddrinfo(host, NULL, &hints, &res)) != 0) {
    fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(status));
    return -1;
  }
  
  addr->sin_addr.s_addr = ((struct sockaddr_in *)res->ai_addr)->sin_addr.s_addr;
  
  freeaddrinfo(res);
    
  return 0;  
}


/**
 * Returns the port specified as an application parameter or the default port
 * if no port has been specified.
 * @param argc the number of the application arguments.
 * @param an array with all the application arguments.
 * @return  the port number from the command line or the default port if 
 * no port has been specified in the command line. Returns -1 if the application
 * has been called with the wrong parameters.
 */
int getPort(int argc, char* argv[])
{
  int param;
  int port = DEFAULT_PORT;

  optind=1;
  // We process the application execution parameters.
	while((param = getopt(argc, argv, "h:p:")) != -1){
		switch((char) param){
		  case 'h': break;
			case 'p':
			  // We modify the port variable just in case a port is passed as a 
			  // parameter
				port = atoi(optarg);
				break;
			default:
				printf("Parametre %c desconegut\n\n", (char) param);
				port = -1;
		}
	}
	
	return port;
}

/**
 * Returns the host name where the server is running.
 * @param argc the number of the application arguments.
 * @param an array with all the application arguments.
 * @Return Returns the host name where the server is running.<br />
 * Returns null if the application has been called with the wrong parameters.
 */
 char * getHost(int argc, char* argv[]){
  char * hostName = NULL;
  int param;
  
  optind=1;
    // We process the application execution parameters.
	while((param = getopt(argc, argv, "h:p:")) != -1){
		switch((char) param){
			case 'p': break;
			case 'h':
        hostName = (char*) malloc(sizeof(char)*strlen(optarg)+1);
				// Un cop creat l'espai, podem copiar la cadena
				strcpy(hostName, optarg);
				break;
			default:
				printf("Parametre %c desconegut\n\n", (char) param);
				hostName = NULL;
		}
	}
	
	printf("in getHost host: %s\n", hostName); //!!!!!!!!!!!!!!
	return hostName;
 }
 
 
 
/**
 * Shows the menu options. 
 */
void print_menu()
{
		// Mostrem un menu perque l'usuari pugui triar quina opcio fer

		printf("\nAplicació de gestió del firewall\n");
		printf("  0. Hello\n");
		printf("  1. Llistar les regles filtrat\n");
		printf("  2. Afegir una regla de filtrat\n");
		printf("  3. Modificar una regla de filtrat\n");
		printf("  4. Eliminar una regla de filtrat\n");
		printf("  5. Eliminar totes les regles de filtrat.\n");
		printf("  6. Sortir\n\n");
		printf("Escull una opcio: ");
} 


/**
 * Sends a HELLO message and prints the server response.
 * @param sock socket used for the communication.
 */
void process_hello_operation(int sock)
{
  	//struct hello_rp hello_rp;
  	char buffer[MAX_BUFF_SIZE];
	memset(&buffer, '\0', sizeof(buffer));
	stshort(MSG_HELLO, buffer);
	size_t size = sizeof(buffer);

	if(send(sock, buffer, size, 0) == -1)
		printf("Error\n");

	recv(sock, buffer, size, 0);
	printf("\n%s\n", buffer+2);
	
}


//asks for the list of rules
void process_list(int sock)
{
  	char buffer[MAX_BUFF_SIZE];
	memset(&buffer, '\0', sizeof(buffer));
	stshort(MSG_LIST, buffer);
	size_t size = sizeof(buffer);

	if(send(sock, buffer, size, 0) == -1)
		printf("Error\n");

	recv(sock, buffer, size, 0);
	printf("\n%s\n", buffer+2);
}

void add_rule(int sock)
{
	char buffer[MAX_BUFF_SIZE];
	char bufferaddr[MAX_BUFF_SIZE];
	char src[MAX_BUFF_SIZE];
	char buffermask[3];
	int buffsd, buffp, mask = 16;
	
	
	memset(&buffer, '\0', sizeof(buffer));
	stshort(MSG_ADD, buffer);
	size_t size = sizeof(buffer);

	printf("Introdueix la regla seguint el format:\n[src|dst] address /Netmask [sport|dport] [port]\n\n");
	scanf("%s %s %s %d %d", src, bufferaddr, buffermask, &buffsd, &buffp);
	printf("\n%s %s mascara:%s %d %d\n", src, bufferaddr, buffermask, buffsd, buffp);
	
	char buffer_mask2[MAX_BUFF_SIZE];
	strcpy(buffer_mask2, buffermask+1);
	printf("\nmask2: %s\n", buffer_mask2);
	mask = stoi(buffer_mask2, MAX_BUFF_SIZE, 10);

	if(!strcmp(src, "src"))
	{
		stshort(SRC, buffer+6);
	}
	if(!strcmp(src, "dst"))
	{
		stshort(DST, buffer+6);
	}
	else{
		printf("error input src/dst\n");
	}
	
	struct in_addr addr;
	inet_aton(bufferaddr, &addr);
	printf("\n%lu\n", (unsigned long)addr.s_addr);
	//sprintf(buffer+2, "%lu",(unsigned long)addr.s_addr); 
	stshort(mask, buffer+8);
	stshort(buffsd, buffer+10);
	stshort(buffp, buffer+12);
	
	printf("\n%s\n", buffer);

	



	if(send(sock, buffer, size, 0) == -1)
		printf("Error\n");
}



/**
 * Closes the socket connected to the server and finishes the program.
 * @param sock socket used for the communication.
 */
void process_exit_operation(int sock)
{
  char buffer[MAX_BUFF_SIZE];
	memset(&buffer, '\0', sizeof(buffer));
	stshort(MSG_FINISH, buffer);
	size_t size = sizeof(buffer);
	send(sock, buffer, size, 0);
}

/** 
 * Function that process the menu option set by the user by calling 
 * the function related to the menu option.
 * @param s The communications socket
 * @param option the menu option specified by the user.
 */
void process_menu_option(int s, int option)
{		  
  switch(option){
    // Opció HELLO
    case MENU_OP_HELLO:
     process_hello_operation(s);
      break;
    case MENU_OP_LIST_RULES: 
	process_list(s);     
      break;  
    case MENU_OP_ADD_RULE:
	add_rule(s);   
      break;   
    case MENU_OP_CHANGE_RULE:
      break;   
    case MENU_OP_DEL_RULE:    	
      break;
    case MENU_OP_FLUSH:
      break;       
    case MENU_OP_EXIT:
	process_exit_operation(s);     
    default:
      printf("Invalid menu option\n");          
  }
}


int main(int argc, char *argv[]){ 
 	 int s;
  unsigned short port;
  char *hostName;  
  int menu_option = 0;
	struct sockaddr_in origen;
	
	//origen.sin_addr.s_addr = INADDR_ANY;//la direccion: deic-dc10 transform to long

  	port = getPort(argc, argv);  
	hostName = getHost(argc, argv);

	

	s=socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

	origen.sin_port=htons(port);//9202
	origen.sin_family= AF_INET;
	setaddrbyname(&origen, hostName);
	socklen_t size = sizeof(origen);
	
	connect(s,(struct sockaddr*)&origen, size);

 
  //Checking that the host name has been set.Otherwise the application is stopped. 
	if(hostName == NULL){
		perror("No s'ha especificat el nom del servidor\n\n");
		return -1;
	}
    
  
  	do{
      		print_menu();
		// getting the user input.
		scanf("%d",&menu_option);
		printf("\n\n"); 
		process_menu_option(s, menu_option);

	 }while(menu_option != MENU_OP_EXIT); //end while(opcio)
 
  return 0; 
}
